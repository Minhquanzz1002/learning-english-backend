openapi: 3.0.3
info:
  title: LearnEng API
  termsOfService: https://swagger.io/terms/
  contact:
    email: quannguyenminh1001@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost/api/v1
tags:
  - name: auth
    description: Mọi thứ về xác thực người dùng
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Đăng nhập
      description: Xử lý đăng nhập
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuthDTO'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthDTO'
        required: true
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
            application/xml:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '401':
          description: Tài khoản hoặc mật khẩu không đúng
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
              example:
                timestamp: "2024-07-15T17:11:02.251Z"
                status: 401
                message: "Tài khoản hoặc mật khẩu không đúng"
        '500':
          description: Lỗi không xác định
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
              example:
                timestamp: "2024-07-15T17:11:02.251Z"
                status: 500
                message: "Lỗi không xác định. Thử lại sau"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /auth/register:
    post:
      tags:
        - auth
      summary: Đăng ký
      description: Xử lý đăng nhập
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuthDTO'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthDTO'
        required: true
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Tên đăng nhập đã tồn tại
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
              example:
                timestamp: "2024-07-15T17:11:02.251Z"
                status: 500
                message: "Tên đăng nhập đã tồn tại"
        '500':
          description: Lỗi không xác định
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
              example:
                timestamp: "2024-07-15T17:11:02.251Z"
                status: 500
                message: "Lỗi không xác định. Thử lại sau"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    BaseError:
      type: object
      properties:
        timestamp:
          type: string
          example: 2024-07-15T17:11:02.251Z
        status:
          type: integer
          example: 404
        message:
          type: string
          example: Mô tả lỗi
      xml:
        name: baseError
    LoginSuccess:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2OTRmMDZkMDMxZjhiMzQxZmNkZGQ5OSIsInVzZXJuYW1lIjoibWluaHF1YW56ejEwMDIiLCJpYXQiOjE3MjEwNjI5NzksImV4cCI6MTcyMjI3MjU3OX0.w8182_4ltXLseWrj0CIdNmCPVSDFfjsTq_QBqne0EfQ
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2OTRmMDZkMDMxZjhiMzQxZmNkZGQ5OSIsInVzZXJuYW1lIjoibWluaHF1YW56ejEwMDIiLCJpYXQiOjE3MjEwNjI5NzksImV4cCI6MTcyMTA2NjU3OX0.JrUEbhJnUH-_BAAH6EsH0EWasv6wWYVWvkpgk9hMktU
        profile:
          $ref: '#/components/schemas/UserDTO'
      xml:
        name: loginSuccess
    AuthDTO:
      type: object
      properties:
        username:
          type: string
          example: minhquanzz1002
        password:
          type: string
          example: Minh123123@
      xml:
        name: authDTO
    UserDTO:
      type: object
      properties:
        _id:
          type: string
          example: 6694f06d031f8b341fcddd99
        name:
          type: string
          example: Nguyen Minh Quan
        username:
          type: string
          example: minhquanzz1002
        status:
          type: string
          example: ACTIVE
          enum:
            - ACTIVE
            - DELETED
            - INACTIVE
        createdAt:
          type: string
          example: 2024-07-15T09:48:29.678Z
          format: date
        updatedAt:
          type: string
          example: 2024-07-15T09:48:29.678Z
          format: date
      xml:
        name: userDTO
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header